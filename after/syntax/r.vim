" we need the conceal feature (vim ‚â• 7.3)
if !has('conceal')
    finish
endif

" remove the keywords. we'll re-add them below
syntax clear ROperator


syntax keyword RNiceOperator in conceal cchar=‚àà
syntax match RNiceOperator "%in%" conceal cchar=‚àà
syntax match RNiceOperator "<-" conceal cchar=‚Üê
syntax match RNiceOperator "->" conceal cchar=‚Üí
syntax keyword RNiceOperator ifelse conceal cchar=‚Åà
syntax match RNiceOperator "else if" conceal cchar=‚Åâ
syntax keyword RNiceOperator c conceal cchar=ùïî
syntax keyword RNiceOperator vector conceal cchar=ùïç
syntax keyword RNiceOperator identical conceal cchar=‚â£
syntax keyword RNiceOperator matrix conceal cchar=ùñ¨
syntax keyword RNiceOperator prod conceal cchar=‚àè
" syntax match RNiceOperator "%>%" conceal cchar=‚û§
" syntax match RNiceOperator "%>%" conceal cchar=‚ä≥
" syntax match RNiceOperator "%>%" conceal cchar=‚ßΩ
" syntax match RNiceOperator "%>%" conceal cchar=‚¶ä
syntax match RNiceOperator "%>%" conceal cchar=‚ñ∑
" syntax match RNiceOperator "%>%" conceal cchar=¬¶
syntax match RNiceKeyword "as.integer" conceal cchar=‚Ñ§
syntax keyword RNiceKeyword col_double conceal cchar=‚Ñù
" radioactivity = mutation
syntax keyword RNiceKeyword mutate conceal cchar=‚ò¢
syntax keyword RNiceOperator col_character conceal cchar=ùï§
syntax keyword RNiceKeyword desc conceal cchar=‚Üò
syntax keyword RNiceKeyword arrange conceal cchar=‚ü†
syntax keyword RNiceOperator group_by conceal cchar=—´


syntax match RNiceOperator "\<or\>" conceal cchar=‚à®
syntax match RNiceOperator "\<and\>" conceal cchar=‚àß
" include the space after ‚Äúnot‚Äù ‚Äì if present ‚Äì so that ‚Äúnot a‚Äù becomes ‚Äú¬¨a‚Äù.
" also, don't hide ‚Äúnot‚Äù behind  ‚Äò¬¨‚Äô if it is after ‚Äúis ‚Äù.
syntax match RNiceOperator "\%(is \)\@<!\<not\%( \|\>\)" conceal cchar=¬¨
syntax match RNiceOperator "\<not in\>" conceal cchar=‚àâ
syntax match RNiceOperator "<=" conceal cchar=‚â§
syntax match RNiceOperator ">=" conceal cchar=‚â•
" only conceal ‚Äú==‚Äù if alone, to avoid concealing SCM conflict markers
syntax match RNiceOperator "=\@<!===\@!" conceal cchar=‚â°

" Guru's modifictations
syntax match RNiceOperator "\<contains\>" conceal cchar=‚àã
syntax match RNiceOperator "[a-zA-Z)]\zs\[0\]\ze" conceal cchar=‚ÇÄ
syntax match RNiceOperator "[a-zA-Z)]\zs\[1\]\ze" conceal cchar=‚ÇÅ
syntax match RNiceOperator "[a-zA-Z)]\zs\[2\]\ze" conceal cchar=‚ÇÇ
syntax match RNiceOperator "[a-zA-Z)]\zs\[3\]\ze" conceal cchar=‚ÇÉ
syntax match RNiceOperator "[a-zA-Z)]\zs\[4\]\ze" conceal cchar=‚ÇÑ
syntax match RNiceOperator "[a-zA-Z)]\zs\[5\]\ze" conceal cchar=‚ÇÖ
syntax match RNiceOperator "[a-zA-Z)]\zs\[6\]\ze" conceal cchar=‚ÇÜ
syntax match RNiceOperator "[a-zA-Z)]\zs\[7\]\ze" conceal cchar=‚Çá
syntax match RNiceOperator "[a-zA-Z)]\zs\[8\]\ze" conceal cchar=‚Çà
syntax match RNiceOperator "[a-zA-Z)]\zs\[9\]\ze" conceal cchar=‚Çâ
syntax match RNiceOperator "[a-zA-Z)]\zs\[-1\]\ze" conceal cchar=‚Çã
syntax match RNiceOperator "!=" conceal cchar=‚â†
syntax match RNiceOperator "\[a\]" conceal cchar=‚Çê
syntax match RNiceOperator "\[e\]" conceal cchar=‚Çë
syntax match RNiceOperator "\[h\]" conceal cchar=‚Çï
syntax match RNiceOperator "\[i\]" conceal cchar=·µ¢
syntax match RNiceOperator "\[j\]" conceal cchar=‚±º
syntax match RNiceOperator "\[k\]" conceal cchar=‚Çñ
syntax match RNiceOperator "\[l\]" conceal cchar=‚Çó
syntax match RNiceOperator "\[m\]" conceal cchar=‚Çò
syntax match RNiceOperator "\[n\]" conceal cchar=‚Çô
syntax match RNiceOperator "\[o\]" conceal cchar=‚Çí
syntax match RNiceOperator "\[p\]" conceal cchar=‚Çö
syntax match RNiceOperator "\[r\]" conceal cchar=·µ£
syntax match RNiceOperator "\[s\]" conceal cchar=‚Çõ
syntax match RNiceOperator "\[t\]" conceal cchar=‚Çú
syntax match RNiceOperator "\[u\]" conceal cchar=·µ§
syntax match RNiceOperator "\[v\]" conceal cchar=·µ•
syntax match RNiceOperator "\[x\]" conceal cchar=‚Çì
syntax keyword RNiceOperator None conceal cchar=‚àÖ
syntax keyword RNiceOperator yield conceal cchar=‚Ü¢
syntax keyword RNiceOperator while conceal cchar=‚ü≥
" syntax keyword RNiceOperator from conceal cchar=‚•∫
syntax keyword RNiceOperator from conceal cchar=‚äÇ
syntax keyword RNiceOperator for conceal cchar=‚àÄ
syntax keyword RNiceOperator if conceal cchar=‚Åá
syntax keyword RNiceOperator else conceal cchar=‚Äº
syntax keyword RNiceOperator function conceal cchar=∆í
syntax keyword RNiceOperator product conceal cchar=‚àè
syntax keyword RNiceOperator length conceal cchar=‚ç¥
syntax keyword RNiceOperator shape conceal cchar=‚ç¥
syntax keyword RNiceOperator reshape conceal cchar=‚ç¥
" syntax keyword RNiceOperator range conceal cchar=ùï£
syntax keyword RNiceOperator range conceal cchar=‚Ä¶
syntax keyword RNiceOperator all conceal cchar=‚àÄ
syntax keyword RNiceOperator any conceal cchar=‚àÉ
syntax match RNiceOperator "\<not any\>" conceal cchar=‚àÑ
syntax keyword RNiceOperator self conceal cchar=@
syntax keyword RNiceOperator int conceal cchar=‚Ñ§
syntax keyword RNiceOperator float conceal cchar=‚Ñù
syntax keyword RNiceOperator str conceal cchar=ùï§
syntax keyword RNiceOperator set conceal cchar=ùïä
syntax keyword RNiceOperator tuple conceal cchar=ùïã
syntax keyword RNiceOperator list conceal cchar=ùïÉ
syntax keyword RNiceOperator iter conceal cchar=ùïö
syntax keyword RNiceOperator complex conceal cchar=‚ÑÇ
syntax keyword RNiceOperator return conceal cchar=‚á¶
syntax keyword RNiceOperator library conceal cchar=‚á≤
syntax keyword RNiceOperator print conceal cchar=‚éô
syntax keyword RNiceOperator abs conceal cchar=|
"enumerating is applying an index i to every ¬® element
"one can think of it as 'indexed'
syntax keyword RNiceOperator enumerate conceal cchar=œä
syntax keyword RNiceOperator zip conceal cchar=ùàÑ
syntax keyword RNiceOperator next conceal cchar=‚â∫
syntax keyword RNiceOperator True conceal cchar=Ôº¥
syntax keyword RNiceOperator False conceal cchar=Ôº¶
"returns one result symbolized by the circle
syntax keyword RNiceOperator join conceal cchar=‚®Å
"returns many values  symbolized by the dots..
syntax keyword RNiceOperator split conceal cchar=‚Åú
" syntax keyword RNiceOperator other conceal cchar=√ñ ‚Öã
syntax keyword RNiceOperator other conceal cchar=—∫
syntax keyword RNiceOperator assert conceal cchar=‚ä¢
syntax match RNiceKeyword "\<\%(math\.\)\?exp\>" conceal cchar=‚ÑØ
syntax keyword RNiceOperator reversed conceal cchar=·¥ô
syntax keyword RNiceOperator reverse conceal cchar=·¥ô
" syntax keyword RNiceOperator sorted conceal cchar=‚áÖ
syntax keyword RNiceOperator sorted conceal cchar=‚ü†
syntax keyword RNiceStatement help conceal cchar=‚Ñπ
"the inverted ¬ø resembles the symbol d in 'd'escription
syntax keyword RNiceOperator description conceal cchar=¬ø
" syntax keyword RNiceOperator min conceal cchar=‚ãÄ
" syntax keyword RNiceOperator max conceal cchar=‚ãÅ
"As in APL ‚åä‚åà are not visible 
syntax keyword RNiceOperator min conceal cchar=‚é£
" we would use brackets ‚é°‚é£
syntax keyword RNiceOperator max conceal cchar=‚é°
"As in APL
syntax keyword RNiceOperator map conceal cchar=¬®
syntax keyword RNiceOperator filter conceal cchar=‚ä¢
syntax keyword RNiceOperator filterfalse conceal cchar=‚ä¨
" the idea of every pair ¬®  reduced to one ‚ç¢ or ≈∏
" or rather the idea of multiple values reduced to one êÖ±
syntax keyword RNiceOperator reduce conceal cchar=êÖ±
" syntax keyword RNiceOperator groupby conceal cchar=‚©û
"every element is verified using a criteriion (K) and is put in a group(bin) –∂
"or every element is filtered by criterion to be put in a group(bin) —´
syntax keyword RNiceOperator groupby conceal cchar=—´
" syntax keyword RNiceOperator starmap conceal cchar=‚ú™
"As in APL (Though the meaning may differ... in R : map ¬®/starmap‚ç£
syntax keyword RNiceOperator starmap conceal cchar=‚ç£
syntax keyword RNiceOperator action conceal cchar=‚ö°
syntax keyword RNiceOperator res conceal cchar=ùñó
syntax match RNiceOperator "\<\%(np\.\)\?zeros\>" conceal cchar=ùüò
syntax match RNiceOperator "\<\%(np\.\)\?ones\>" conceal cchar=ùüô
syntax match RNiceOperator "\<\%(np\.\)\?array\>" conceal cchar=ùî∏
syntax match RNiceOperator "\<\%(np\.\)\?dot\>" conceal cchar=‚Ä¢
syntax match RNiceOperator "\<\%(np\.\)\?arange\>" conceal cchar=‚Ä¶
syntax keyword RNiceOperator read conceal cchar=‚áß
syntax keyword RNiceOperator imread conceal cchar=‚áß
syntax match RNiceOperator "\<\%(pd\.\)\?read" conceal cchar=‚áß
syntax keyword RNiceOperator write conceal cchar=‚á©
syntax keyword RNiceOperator imsave conceal cchar=‚á©
syntax keyword RNiceOperator args conceal cchar=ùñÜ
syntax match RNiceOperator "\<\%(sys\.\)\?argv\>" conceal cchar=ùñÜ
syntax keyword RNiceOperator takewhile conceal cchar=‚§â
syntax keyword RNiceOperator dropwhile conceal cchar=‚§à
syntax keyword RNiceOperator combinations conceal cchar=ùìí
syntax keyword RNiceOperator permutations conceal cchar=ùëÉ
syntax keyword RNiceOperator islice conceal cchar=‚ü¶
syntax match RNiceOperator "\<\%(math\.\)\?log\>" conceal cchar=‚Ñì
syntax match RNiceOperator "\(\*\*\)a\ze\_W" conceal cchar=·µÉ
syntax match RNiceOperator "\(\*\*\)b\ze\_W" conceal cchar=·µá
syntax match RNiceOperator "\(\*\*\)c\ze\_W" conceal cchar=·∂ú
syntax match RNiceOperator "\(\*\*\)d\ze\_W" conceal cchar=·µà
syntax match RNiceOperator "\(\*\*\)e\ze\_W" conceal cchar=·µâ
syntax match RNiceOperator "\(\*\*\)f\ze\_W" conceal cchar=·∂†
syntax match RNiceOperator "\(\*\*\)g\ze\_W" conceal cchar=·µç
syntax match RNiceOperator "\(\*\*\)h\ze\_W" conceal cchar= ∞
syntax match RNiceOperator "\(\*\*\)i\ze\_W" conceal cchar=‚Å±
syntax match RNiceOperator "\(\*\*\)j\ze\_W" conceal cchar= ≤
syntax match RNiceOperator "\(\*\*\)k\ze\_W" conceal cchar=·µè
syntax match RNiceOperator "\(\*\*\)l\ze\_W" conceal cchar=À°
syntax match RNiceOperator "\(\*\*\)m\ze\_W" conceal cchar=·µê
syntax match RNiceOperator "\(\*\*\)n\ze\_W" conceal cchar=‚Åø
syntax match RNiceOperator "\(\*\*\)o\ze\_W" conceal cchar=·µí
syntax match RNiceOperator "\(\*\*\)p\ze\_W" conceal cchar=·µñ
syntax match RNiceOperator "\(\*\*\)r\ze\_W" conceal cchar= ≥
syntax match RNiceOperator "\(\*\*\)s\ze\_W" conceal cchar=À¢
syntax match RNiceOperator "\(\*\*\)t\ze\_W" conceal cchar=·µó
syntax match RNiceOperator "\(\*\*\)u\ze\_W" conceal cchar=·µò
syntax match RNiceOperator "\(\*\*\)v\ze\_W" conceal cchar=·µõ
syntax match RNiceOperator "\(\*\*\)w\ze\_W" conceal cchar= ∑
syntax match RNiceOperator "\(\*\*\)x\ze\_W" conceal cchar=À£
syntax match RNiceOperator "\(\*\*\)y\ze\_W" conceal cchar= ∏
syntax match RNiceOperator "\(\*\*\)z\ze\_W" conceal cchar=·∂ª
syntax match RNiceOperator "\(\*\*\)0\ze\_W" conceal cchar=‚Å∞
syntax match RNiceOperator "\(\*\*\)1\ze\_W" conceal cchar=¬π
syntax match RNiceOperator "\(\*\*\)2\ze\_W" conceal cchar=¬≤
syntax match RNiceOperator "\(\*\*\)3\ze\_W" conceal cchar=¬≥
syntax match RNiceOperator "\(\*\*\)4\ze\_W" conceal cchar=‚Å¥
syntax match RNiceOperator "\(\*\*\)5\ze\_W" conceal cchar=‚Åµ
syntax match RNiceOperator "\(\*\*\)6\ze\_W" conceal cchar=‚Å∂
syntax match RNiceOperator "\(\*\*\)7\ze\_W" conceal cchar=‚Å∑
syntax match RNiceOperator "\(\*\*\)8\ze\_W" conceal cchar=‚Å∏
syntax match RNiceOperator "\(\*\*\)9\ze\_W" conceal cchar=‚Åπ
syntax keyword RNiceOperator most_common conceal cchar=‚àá
" syntax keyword RNiceOperator Exception conceal cchar=‚ö†
syntax keyword RNiceOperator Exception conceal cchar=‚ùó
"resembles speed bump
syntax keyword RNiceOperator raise conceal cchar=‚âè
syntax keyword RNiceOperator count conceal cchar=ÔºÉ
syntax keyword RNiceOperator Counter conceal cchar=ÔºÉ
" syntax keyword RNiceOperator items conceal cchar=Ôºä
" syntax keyword RNiceOperator keys conceal cchar=‚üú
" syntax keyword RNiceOperator values conceal cchar=‚ä∏
syntax keyword RNiceOperator values conceal cchar=Ôºä
" syntax keyword RNiceOperator keys conceal cchar=‚òå
syntax keyword RNiceOperator keys conceal cchar=‚ö∑
syntax keyword RNiceOperator items conceal cchar=‚òç
syntax keyword RNiceOperator repeat conceal cchar=‚Üª
syntax keyword RNiceOperator cycle conceal cchar=‚•Å
syntax keyword RNiceOperator compress conceal cchar=‚®ù
syntax keyword RNiceOperator tee conceal cchar=¬¶
" as in APL
syntax match RNiceOperator "\<\%(random\.\)\?sample\>" conceal cchar=‚ç∞
syntax keyword RNiceOperator xs conceal cchar=·∫å
syntax keyword RNiceOperator ys conceal cchar=≈∏
syntax keyword RNiceOperator ts conceal cchar=·∫ó
" as in APL
syntax match RNiceOperator "\<\%(re\.\)\?search\>" conceal cchar=‚ç∑
" as in Haskell
syntax keyword RNiceOperator isinstance conceal cchar=‚à∑
" syntax keyword RNiceOperator line conceal cchar=‚àí
syntax keyword RNiceOperator lines conceal cchar=‚â£
" syntax keyword RNiceOperator word conceal cchar=‚´æ
syntax keyword RNiceOperator words conceal cchar=‚´º
syntax keyword RNiceOperator columns conceal cchar=‚´º
syntax match RNiceOperator "\<nb_" conceal cchar=·¥∫
syntax match RNiceOperator "_count\>" conceal cchar=#
syntax keyword RNiceOperator strip conceal cchar=Ô∏∫
syntax keyword RNiceOperator encode conceal cchar=‚≠≥
syntax keyword RNiceOperator decode conceal cchar=‚≠±
syntax keyword RNiceOperator replace conceal cchar=‚áù
syntax match RNiceOperator "\<\%(re\.\)\?sub\>" conceal cchar=‚áù
syntax keyword RNiceOperator group conceal cchar=…†
syntax keyword RNiceOperator or_ conceal cchar=‚à®
syntax keyword RNiceOperator and_ conceal cchar=‚àß
syntax keyword RNiceOperator not_ conceal cchar=¬¨
syntax keyword RNiceOperator union conceal cchar=‚à™
syntax keyword RNiceOperator intersection conceal cchar=‚à©
syntax keyword RNiceOperator t conceal cchar=·µÄ
syntax keyword RNiceOperator transpose conceal cchar=·µÄ
syntax keyword RNiceOperator maximum conceal cchar=‚é°
syntax keyword RNiceOperator minimum conceal cchar=‚é£
syntax keyword RNiceOperator ceil conceal cchar=‚åà
syntax keyword RNiceOperator floor conceal cchar=‚åä
syntax keyword RNiceOperator round conceal cchar=‚âà
syntax keyword RNiceOperator mean conceal cchar=Œº
syntax keyword RNiceOperator std conceal cchar=œÉ
syntax keyword RNiceOperator cumsum conceal cchar=ùù®
syntax keyword RNiceOperator cumprod conceal cchar=ùù•
syntax match RNiceOperator "\<\%(random\.\)\?randrange\>" conceal cchar=∆¶
syntax match RNiceOperator "\<\%(np\.random\.\)\?randn\>" conceal cchar=‚ç∞
syntax match RNiceOperator " @ " conceal cchar=‚Ä¢
syntax keyword RNiceOperator index conceal cchar=‚ö∑
syntax keyword RNiceOperator index_col conceal cchar=‚ö∑
syntax keyword RNiceOperator isin conceal cchar=‚ãµ
syntax keyword RNiceOperator iloc conceal cchar=‚ü¶
syntax keyword RNiceOperator loc conceal cchar=‚¶É
syntax keyword RNiceOperator copy conceal cchar=‚éò
syntax match RNiceKeyword "\<ascending=True\>" conceal cchar=‚Üó
syntax match RNiceKeyword "\<ascending=False\>" conceal cchar=‚Üò
syntax match RNiceOperator "\<\%(np\.\)\?nan\>" conceal cchar=·¥é
" we create an intersection ^ of unique elements
" syntax keyword RNiceOperator unique conceal cchar=√ª
" no two elements are repeated
syntax keyword RNiceOperator unique conceal cchar=∆ª
syntax keyword RNiceOperator is_unique conceal cchar=∆ª
syntax keyword RNiceOperator diff conceal cchar=Œî
syntax keyword RNiceOperator sep conceal cchar=‚ê£
syntax match RNiceKeyword "\<inplace=True\>" conceal cchar=ÔºÅ
syntax match RNiceKeyword "\<\%(time\.\)\?sleep\>" conceal cchar=‚åõ
" The order of the following two elements are important
syntax match RNiceKeyword "\<find_element" conceal cchar=ùüô
syntax match RNiceKeyword "\<find_elements" conceal cchar=Ôºä
syntax match RNiceKeyword "\<get_attribute\>" conceal cchar=‚à∑
syntax match RNiceKeyword "by_id\>" conceal cchar=#

syntax keyword RNiceOperator sum conceal cchar=‚àë
syntax match RNiceOperator "\<\%(math\.\)\?sqrt\>" conceal cchar=‚àö
syntax match RNiceKeyword "\<\%(math\.\)\?pi\>" conceal cchar=œÄ

syntax keyword RNiceStatement lambda conceal cchar=Œª

hi link RNiceOperator Operator
hi link RNiceStatement Statement
hi link RNiceKeyword Keyword
hi! link Conceal Operator

setlocal conceallevel=1
